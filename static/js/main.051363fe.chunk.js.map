{"version":3,"sources":["containers/Home.tsx","modules/counterModule.tsx","containers/Counter.tsx","App.tsx","serviceWorker.ts","modules/configModule.tsx","redux/reducers.ts","redux/rootState.ts","redux/store.tsx","index.tsx"],"names":["Home","withRouter","props","history","jampToCounter","React","useCallback","event","push","Fragment","href","onClick","require","config","debug","initial","count","COUNTER_ACTIONS","counterModule","reducer","state","action","type","Object","assign","number","add","dispatch","getState","added","counter","Counter","stateCount","useSelector","useDispatch","addHandler","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","nodeEnv","process","copy_right","configModule","reducers","combineReducers","initialState","enhancers","CONFIG","__REDUX_DEVTOOLS_EXTENSION__","middlewares","reduxThunk","composedEnhancers","compose","applyMiddleware","store","createStore","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.051363fe.chunk.js","sourcesContent":["import React from 'react'\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\r\n\r\ninterface iHome extends RouteComponentProps<{}> {}\r\n\r\nconst _Home:React.FC<iHome> = props => {\r\n  const { history } = props\r\n\r\n  const jampToCounter = React.useCallback(\r\n    (event: React.MouseEvent<HTMLAnchorElement>) => {\r\n      history.push('/counter')\r\n    },\r\n    []\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h1>home</h1>\r\n      <a href=\"#\" onClick={jampToCounter}>Counter</a>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport const Home = withRouter(_Home) ","import iRootState from \"../redux/rootState\"\r\n\r\nconst dotenv = require('dotenv')\r\ndotenv.config({ debug: true })\r\n\r\nexport interface iCounterState {\r\n    count: number\r\n}\r\n\r\nexport const initial:iCounterState = {\r\n    count: 0\r\n}\r\n\r\n/**\r\n * Reducer\r\n */\r\n\r\nconst COUNTER_ACTIONS = {\r\n  ADD: 'counter_action_add'\r\n}\r\n\r\ninterface iCounterAction {\r\n  type: string,\r\n  number: number\r\n} \r\n\r\nconst reducer = (state: iCounterState = initial, action: iCounterAction) => {\r\n    switch (action.type) {\r\n      case COUNTER_ACTIONS.ADD:\r\n        return Object.assign({}, state, {count: state.count + action.number})\r\n      \r\n      default: return state\r\n    }\r\n}\r\n\r\nconst added = (add: number):iCounterAction => {\r\n  return {\r\n    type: COUNTER_ACTIONS.ADD,\r\n    number: add\r\n  }\r\n}\r\n\r\nconst add = (add: number) => {\r\n  return (dispatch: any, getState: () => iRootState) => {\r\n    dispatch(added(add))\r\n  }\r\n}\r\n\r\n\r\nexport const counterModule = {\r\n  initial,\r\n  reducer,\r\n  action: {\r\n    add\r\n  }\r\n}\r\n","import React from 'react'\r\nimport iRootState from '../redux/rootState'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { counterModule } from '../modules/counterModule'\r\n\r\nconst count = (state: iRootState): number => state.counter.count\r\n\r\nexport const Counter:React.FC = () => {\r\n  const stateCount = useSelector(count)\r\n  const dispatch = useDispatch()\r\n\r\n  const addHandler = React.useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      dispatch(counterModule.action.add(1))\r\n    },\r\n    []\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      {stateCount}:<button type=\"button\" onClick={addHandler}>add</button>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { CopyRight } from './containers/Copyright'\n\nimport { Home } from './containers/Home';\nimport { Counter } from './containers/Counter';\nimport { Route, Switch } from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home}/>\n      <Route exact path=\"/counter\" component={Counter}/>\n    </Switch>\n\n  );\n}\n\nexport default App;\n\n/*\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <CopyRight />\n        <Counter />\n      </header>\n    </div>\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const dotenv = require('dotenv')\r\ndotenv.config({ debug: true })\r\n\r\nexport interface iConfigState {\r\n    nodeEnv?: string\r\n    copy_right?: string\r\n}\r\n\r\nexport const initial:iConfigState = {\r\n    nodeEnv: process.env.NODE_ENV,\r\n    copy_right: process.env.REACT_APP_COPY_RIGHT,\r\n}\r\n\r\n/**\r\n * Reducer\r\n */\r\nconst reducer = (state: iConfigState = initial, action: any) => {\r\n    switch (action.type) {\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\nexport const configModule = {\r\n    initial,\r\n    reducer\r\n}\r\n","import { combineReducers, Reducer } from 'redux'\r\nimport { configModule } from '../modules/configModule'\r\nimport { counterModule } from '../modules/counterModule'\r\n\r\nexport const reducers = combineReducers<Reducer>({\r\n  config: configModule.reducer,\r\n  counter: counterModule.reducer\r\n})\r\n","import { configModule, iConfigState } from '../modules/configModule'\r\nimport { counterModule, iCounterState } from '../modules/counterModule'\r\n\r\nexport interface iRootState {\r\n  config: iConfigState\r\n  counter: iCounterState\r\n}\r\n\r\nexport default iRootState\r\n\r\nexport const initialState: iRootState = {\r\n  config: configModule.initial,\r\n  counter: counterModule.initial\r\n}","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport reduxThunk from 'redux-thunk'\r\nimport { reducers } from './reducers'\r\nimport { initialState } from './rootState'\r\nimport { initial as CONFIG } from '../modules/configModule'\r\n\r\n//import { createBrowserHistory } from 'history'\r\n// export const history = createBrowserHistory()\r\n\r\n/** enhancer */\r\nconst enhancers:any[] = []\r\n\r\n/** Redux Dev Tool */\r\nif(CONFIG.nodeEnv !== 'development' && (window as any).__REDUX_DEVTOOLS_EXTENSION__){\r\n  enhancers.push((window as any).__REDUX_DEVTOOLS_EXTENSION__())\r\n}\r\n\r\n// export const history = createBrowserHistory()\r\n\r\n/** middle ware */\r\nconst middlewares = [\r\n  reduxThunk\r\n]\r\n\r\nconst composedEnhancers = compose(\r\n  applyMiddleware(...middlewares),\r\n  ...enhancers\r\n)\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  initialState,\r\n  composedEnhancers\r\n)\r\n  \r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nserviceWorker.register();\n"],"sourceRoot":""}